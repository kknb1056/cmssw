// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrackingParticleNtuple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tpanalyserproto {

namespace {

const ::google::protobuf::Descriptor* SimTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackingParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackingParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackingVertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackingVertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchedTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchedTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackingParticleCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackingParticleCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchedTrackCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchedTrackCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrackingParticleNtuple_2eproto() {
  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrackingParticleNtuple.proto");
  GOOGLE_CHECK(file != NULL);
  SimTrack_descriptor_ = file->message_type(0);
  static const int SimTrack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, bunch_crossing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, track_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, mom_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, mom_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, mom_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, type_),
  };
  SimTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimTrack_descriptor_,
      SimTrack::default_instance_,
      SimTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimTrack));
  TrackingParticle_descriptor_ = file->message_type(1);
  static const int TrackingParticle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticle, sim_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticle, parent_vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticle, decay_vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticle, pdg_id_),
  };
  TrackingParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackingParticle_descriptor_,
      TrackingParticle::default_instance_,
      TrackingParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackingParticle));
  TrackingVertex_descriptor_ = file->message_type(2);
  static const int TrackingVertex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingVertex, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingVertex, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingVertex, position_z_),
  };
  TrackingVertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackingVertex_descriptor_,
      TrackingVertex::default_instance_,
      TrackingVertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingVertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingVertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackingVertex));
  MatchedTrack_descriptor_ = file->message_type(3);
  static const int MatchedTrack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, dxy_reconstructed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, dz_reconstructed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, dxy_simulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, dz_simulated_),
  };
  MatchedTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchedTrack_descriptor_,
      MatchedTrack::default_instance_,
      MatchedTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchedTrack));
  TrackingParticleCollection_descriptor_ = file->message_type(4);
  static const int TrackingParticleCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticleCollection, tracking_particle_),
  };
  TrackingParticleCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackingParticleCollection_descriptor_,
      TrackingParticleCollection::default_instance_,
      TrackingParticleCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticleCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingParticleCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackingParticleCollection));
  MatchedTrackCollection_descriptor_ = file->message_type(5);
  static const int MatchedTrackCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrackCollection, matched_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrackCollection, name_),
  };
  MatchedTrackCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchedTrackCollection_descriptor_,
      MatchedTrackCollection::default_instance_,
      MatchedTrackCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrackCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrackCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchedTrackCollection));
  Event_descriptor_ = file->message_type(6);
  static const int Event_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, tracking_particle_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, matched_track_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, beam_spot_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Sample_descriptor_ = file->message_type(7);
  static const int Sample_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, event_),
  };
  Sample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample_descriptor_,
      Sample::default_instance_,
      Sample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrackingParticleNtuple_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimTrack_descriptor_, &SimTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackingParticle_descriptor_, &TrackingParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackingVertex_descriptor_, &TrackingVertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchedTrack_descriptor_, &MatchedTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackingParticleCollection_descriptor_, &TrackingParticleCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchedTrackCollection_descriptor_, &MatchedTrackCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample_descriptor_, &Sample::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto() {
  delete SimTrack::default_instance_;
  delete SimTrack_reflection_;
  delete TrackingParticle::default_instance_;
  delete TrackingParticle_reflection_;
  delete TrackingVertex::default_instance_;
  delete TrackingVertex_reflection_;
  delete MatchedTrack::default_instance_;
  delete MatchedTrack_reflection_;
  delete TrackingParticleCollection::default_instance_;
  delete TrackingParticleCollection_reflection_;
  delete MatchedTrackCollection::default_instance_;
  delete MatchedTrackCollection_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Sample::default_instance_;
  delete Sample_reflection_;
}

void protobuf_AddDesc_TrackingParticleNtuple_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034TrackingParticleNtuple.proto\022\017tpanalys"
    "erproto\"\216\001\n\010SimTrack\022\r\n\005event\030\001 \001(\003\022\026\n\016b"
    "unch_crossing\030\002 \001(\003\022\020\n\010track_id\030\003 \001(\004\022\016\n"
    "\006charge\030\004 \001(\003\022\r\n\005mom_x\030\005 \001(\002\022\r\n\005mom_y\030\006 "
    "\001(\002\022\r\n\005mom_z\030\007 \001(\002\022\014\n\004type\030\010 \001(\003\"\277\001\n\020Tra"
    "ckingParticle\022,\n\tsim_track\030\001 \003(\0132\031.tpana"
    "lyserproto.SimTrack\0226\n\rparent_vertex\030\002 \001"
    "(\0132\037.tpanalyserproto.TrackingVertex\0225\n\014d"
    "ecay_vertex\030\003 \003(\0132\037.tpanalyserproto.Trac"
    "kingVertex\022\016\n\006pdg_id\030\004 \001(\003\"L\n\016TrackingVe"
    "rtex\022\022\n\nposition_x\030\001 \001(\002\022\022\n\nposition_y\030\002"
    " \001(\002\022\022\n\nposition_z\030\003 \001(\002\"\211\001\n\014MatchedTrac"
    "k\022\013\n\003eta\030\001 \001(\002\022\n\n\002pt\030\002 \001(\002\022\031\n\021dxy_recons"
    "tructed\030\003 \001(\002\022\030\n\020dz_reconstructed\030\004 \001(\002\022"
    "\025\n\rdxy_simulated\030\005 \001(\002\022\024\n\014dz_simulated\030\006"
    " \001(\002\"Z\n\032TrackingParticleCollection\022<\n\021tr"
    "acking_particle\030\001 \003(\0132!.tpanalyserproto."
    "TrackingParticle\"\\\n\026MatchedTrackCollecti"
    "on\0224\n\rmatched_track\030\001 \003(\0132\035.tpanalyserpr"
    "oto.MatchedTrack\022\014\n\004name\030\002 \001(\t\"\331\001\n\005Event"
    "\022Q\n\034tracking_particle_collection\030\001 \003(\0132+"
    ".tpanalyserproto.TrackingParticleCollect"
    "ion\022I\n\030matched_track_collection\030\002 \003(\0132\'."
    "tpanalyserproto.MatchedTrackCollection\0222"
    "\n\tbeam_spot\030\003 \001(\0132\037.tpanalyserproto.Trac"
    "kingVertex\"/\n\006Sample\022%\n\005event\030\001 \003(\0132\026.tp"
    "analyserproto.Event", 1059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrackingParticleNtuple.proto", &protobuf_RegisterTypes);
  SimTrack::default_instance_ = new SimTrack();
  TrackingParticle::default_instance_ = new TrackingParticle();
  TrackingVertex::default_instance_ = new TrackingVertex();
  MatchedTrack::default_instance_ = new MatchedTrack();
  TrackingParticleCollection::default_instance_ = new TrackingParticleCollection();
  MatchedTrackCollection::default_instance_ = new MatchedTrackCollection();
  Event::default_instance_ = new Event();
  Sample::default_instance_ = new Sample();
  SimTrack::default_instance_->InitAsDefaultInstance();
  TrackingParticle::default_instance_->InitAsDefaultInstance();
  TrackingVertex::default_instance_->InitAsDefaultInstance();
  MatchedTrack::default_instance_->InitAsDefaultInstance();
  TrackingParticleCollection::default_instance_->InitAsDefaultInstance();
  MatchedTrackCollection::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Sample::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrackingParticleNtuple_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrackingParticleNtuple_2eproto {
  StaticDescriptorInitializer_TrackingParticleNtuple_2eproto() {
    protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  }
} static_descriptor_initializer_TrackingParticleNtuple_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SimTrack::kEventFieldNumber;
const int SimTrack::kBunchCrossingFieldNumber;
const int SimTrack::kTrackIdFieldNumber;
const int SimTrack::kChargeFieldNumber;
const int SimTrack::kMomXFieldNumber;
const int SimTrack::kMomYFieldNumber;
const int SimTrack::kMomZFieldNumber;
const int SimTrack::kTypeFieldNumber;
#endif  // !_MSC_VER

SimTrack::SimTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimTrack::InitAsDefaultInstance() {
}

SimTrack::SimTrack(const SimTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimTrack::SharedCtor() {
  _cached_size_ = 0;
  event_ = GOOGLE_LONGLONG(0);
  bunch_crossing_ = GOOGLE_LONGLONG(0);
  track_id_ = GOOGLE_ULONGLONG(0);
  charge_ = GOOGLE_LONGLONG(0);
  mom_x_ = 0;
  mom_y_ = 0;
  mom_z_ = 0;
  type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimTrack::~SimTrack() {
  SharedDtor();
}

void SimTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimTrack_descriptor_;
}

const SimTrack& SimTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

SimTrack* SimTrack::default_instance_ = NULL;

SimTrack* SimTrack::New() const {
  return new SimTrack;
}

void SimTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = GOOGLE_LONGLONG(0);
    bunch_crossing_ = GOOGLE_LONGLONG(0);
    track_id_ = GOOGLE_ULONGLONG(0);
    charge_ = GOOGLE_LONGLONG(0);
    mom_x_ = 0;
    mom_y_ = 0;
    mom_z_ = 0;
    type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bunch_crossing;
        break;
      }
      
      // optional int64 bunch_crossing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bunch_crossing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bunch_crossing_)));
          set_has_bunch_crossing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_track_id;
        break;
      }
      
      // optional uint64 track_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_id_)));
          set_has_track_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charge;
        break;
      }
      
      // optional int64 charge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_mom_x;
        break;
      }
      
      // optional float mom_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mom_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mom_x_)));
          set_has_mom_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_mom_y;
        break;
      }
      
      // optional float mom_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mom_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mom_y_)));
          set_has_mom_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_mom_z;
        break;
      }
      
      // optional float mom_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mom_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mom_z_)));
          set_has_mom_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }
      
      // optional int64 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->event(), output);
  }
  
  // optional int64 bunch_crossing = 2;
  if (has_bunch_crossing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bunch_crossing(), output);
  }
  
  // optional uint64 track_id = 3;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->track_id(), output);
  }
  
  // optional int64 charge = 4;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charge(), output);
  }
  
  // optional float mom_x = 5;
  if (has_mom_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mom_x(), output);
  }
  
  // optional float mom_y = 6;
  if (has_mom_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mom_y(), output);
  }
  
  // optional float mom_z = 7;
  if (has_mom_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mom_z(), output);
  }
  
  // optional int64 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->event(), target);
  }
  
  // optional int64 bunch_crossing = 2;
  if (has_bunch_crossing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bunch_crossing(), target);
  }
  
  // optional uint64 track_id = 3;
  if (has_track_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->track_id(), target);
  }
  
  // optional int64 charge = 4;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charge(), target);
  }
  
  // optional float mom_x = 5;
  if (has_mom_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mom_x(), target);
  }
  
  // optional float mom_y = 6;
  if (has_mom_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mom_y(), target);
  }
  
  // optional float mom_z = 7;
  if (has_mom_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mom_z(), target);
  }
  
  // optional int64 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimTrack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->event());
    }
    
    // optional int64 bunch_crossing = 2;
    if (has_bunch_crossing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bunch_crossing());
    }
    
    // optional uint64 track_id = 3;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->track_id());
    }
    
    // optional int64 charge = 4;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charge());
    }
    
    // optional float mom_x = 5;
    if (has_mom_x()) {
      total_size += 1 + 4;
    }
    
    // optional float mom_y = 6;
    if (has_mom_y()) {
      total_size += 1 + 4;
    }
    
    // optional float mom_z = 7;
    if (has_mom_z()) {
      total_size += 1 + 4;
    }
    
    // optional int64 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimTrack::MergeFrom(const SimTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_bunch_crossing()) {
      set_bunch_crossing(from.bunch_crossing());
    }
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mom_x()) {
      set_mom_x(from.mom_x());
    }
    if (from.has_mom_y()) {
      set_mom_y(from.mom_y());
    }
    if (from.has_mom_z()) {
      set_mom_z(from.mom_z());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTrack::CopyFrom(const SimTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTrack::IsInitialized() const {
  
  return true;
}

void SimTrack::Swap(SimTrack* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(bunch_crossing_, other->bunch_crossing_);
    std::swap(track_id_, other->track_id_);
    std::swap(charge_, other->charge_);
    std::swap(mom_x_, other->mom_x_);
    std::swap(mom_y_, other->mom_y_);
    std::swap(mom_z_, other->mom_z_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimTrack_descriptor_;
  metadata.reflection = SimTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackingParticle::kSimTrackFieldNumber;
const int TrackingParticle::kParentVertexFieldNumber;
const int TrackingParticle::kDecayVertexFieldNumber;
const int TrackingParticle::kPdgIdFieldNumber;
#endif  // !_MSC_VER

TrackingParticle::TrackingParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackingParticle::InitAsDefaultInstance() {
  parent_vertex_ = const_cast< ::tpanalyserproto::TrackingVertex*>(&::tpanalyserproto::TrackingVertex::default_instance());
}

TrackingParticle::TrackingParticle(const TrackingParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackingParticle::SharedCtor() {
  _cached_size_ = 0;
  parent_vertex_ = NULL;
  pdg_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackingParticle::~TrackingParticle() {
  SharedDtor();
}

void TrackingParticle::SharedDtor() {
  if (this != default_instance_) {
    delete parent_vertex_;
  }
}

void TrackingParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackingParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackingParticle_descriptor_;
}

const TrackingParticle& TrackingParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

TrackingParticle* TrackingParticle::default_instance_ = NULL;

TrackingParticle* TrackingParticle::New() const {
  return new TrackingParticle;
}

void TrackingParticle::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_parent_vertex()) {
      if (parent_vertex_ != NULL) parent_vertex_->::tpanalyserproto::TrackingVertex::Clear();
    }
    pdg_id_ = GOOGLE_LONGLONG(0);
  }
  sim_track_.Clear();
  decay_vertex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackingParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tpanalyserproto.SimTrack sim_track = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sim_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sim_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sim_track;
        if (input->ExpectTag(18)) goto parse_parent_vertex;
        break;
      }
      
      // optional .tpanalyserproto.TrackingVertex parent_vertex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_vertex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_decay_vertex;
        break;
      }
      
      // repeated .tpanalyserproto.TrackingVertex decay_vertex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decay_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decay_vertex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_decay_vertex;
        if (input->ExpectTag(32)) goto parse_pdg_id;
        break;
      }
      
      // optional int64 pdg_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pdg_id_)));
          set_has_pdg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackingParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tpanalyserproto.SimTrack sim_track = 1;
  for (int i = 0; i < this->sim_track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sim_track(i), output);
  }
  
  // optional .tpanalyserproto.TrackingVertex parent_vertex = 2;
  if (has_parent_vertex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parent_vertex(), output);
  }
  
  // repeated .tpanalyserproto.TrackingVertex decay_vertex = 3;
  for (int i = 0; i < this->decay_vertex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decay_vertex(i), output);
  }
  
  // optional int64 pdg_id = 4;
  if (has_pdg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pdg_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackingParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tpanalyserproto.SimTrack sim_track = 1;
  for (int i = 0; i < this->sim_track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sim_track(i), target);
  }
  
  // optional .tpanalyserproto.TrackingVertex parent_vertex = 2;
  if (has_parent_vertex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parent_vertex(), target);
  }
  
  // repeated .tpanalyserproto.TrackingVertex decay_vertex = 3;
  for (int i = 0; i < this->decay_vertex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->decay_vertex(i), target);
  }
  
  // optional int64 pdg_id = 4;
  if (has_pdg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->pdg_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackingParticle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .tpanalyserproto.TrackingVertex parent_vertex = 2;
    if (has_parent_vertex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent_vertex());
    }
    
    // optional int64 pdg_id = 4;
    if (has_pdg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pdg_id());
    }
    
  }
  // repeated .tpanalyserproto.SimTrack sim_track = 1;
  total_size += 1 * this->sim_track_size();
  for (int i = 0; i < this->sim_track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sim_track(i));
  }
  
  // repeated .tpanalyserproto.TrackingVertex decay_vertex = 3;
  total_size += 1 * this->decay_vertex_size();
  for (int i = 0; i < this->decay_vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decay_vertex(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackingParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackingParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackingParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackingParticle::MergeFrom(const TrackingParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  sim_track_.MergeFrom(from.sim_track_);
  decay_vertex_.MergeFrom(from.decay_vertex_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_parent_vertex()) {
      mutable_parent_vertex()->::tpanalyserproto::TrackingVertex::MergeFrom(from.parent_vertex());
    }
    if (from.has_pdg_id()) {
      set_pdg_id(from.pdg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackingParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingParticle::CopyFrom(const TrackingParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingParticle::IsInitialized() const {
  
  return true;
}

void TrackingParticle::Swap(TrackingParticle* other) {
  if (other != this) {
    sim_track_.Swap(&other->sim_track_);
    std::swap(parent_vertex_, other->parent_vertex_);
    decay_vertex_.Swap(&other->decay_vertex_);
    std::swap(pdg_id_, other->pdg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackingParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackingParticle_descriptor_;
  metadata.reflection = TrackingParticle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackingVertex::kPositionXFieldNumber;
const int TrackingVertex::kPositionYFieldNumber;
const int TrackingVertex::kPositionZFieldNumber;
#endif  // !_MSC_VER

TrackingVertex::TrackingVertex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackingVertex::InitAsDefaultInstance() {
}

TrackingVertex::TrackingVertex(const TrackingVertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackingVertex::SharedCtor() {
  _cached_size_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  position_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackingVertex::~TrackingVertex() {
  SharedDtor();
}

void TrackingVertex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackingVertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackingVertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackingVertex_descriptor_;
}

const TrackingVertex& TrackingVertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

TrackingVertex* TrackingVertex::default_instance_ = NULL;

TrackingVertex* TrackingVertex::New() const {
  return new TrackingVertex;
}

void TrackingVertex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_x_ = 0;
    position_y_ = 0;
    position_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackingVertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float position_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position_y;
        break;
      }
      
      // optional float position_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_position_z;
        break;
      }
      
      // optional float position_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_z_)));
          set_has_position_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackingVertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float position_x = 1;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position_x(), output);
  }
  
  // optional float position_y = 2;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_y(), output);
  }
  
  // optional float position_z = 3;
  if (has_position_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackingVertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float position_x = 1;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position_x(), target);
  }
  
  // optional float position_y = 2;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_y(), target);
  }
  
  // optional float position_z = 3;
  if (has_position_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackingVertex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float position_x = 1;
    if (has_position_x()) {
      total_size += 1 + 4;
    }
    
    // optional float position_y = 2;
    if (has_position_y()) {
      total_size += 1 + 4;
    }
    
    // optional float position_z = 3;
    if (has_position_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackingVertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackingVertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackingVertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackingVertex::MergeFrom(const TrackingVertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_position_z()) {
      set_position_z(from.position_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackingVertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingVertex::CopyFrom(const TrackingVertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingVertex::IsInitialized() const {
  
  return true;
}

void TrackingVertex::Swap(TrackingVertex* other) {
  if (other != this) {
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(position_z_, other->position_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackingVertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackingVertex_descriptor_;
  metadata.reflection = TrackingVertex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchedTrack::kEtaFieldNumber;
const int MatchedTrack::kPtFieldNumber;
const int MatchedTrack::kDxyReconstructedFieldNumber;
const int MatchedTrack::kDzReconstructedFieldNumber;
const int MatchedTrack::kDxySimulatedFieldNumber;
const int MatchedTrack::kDzSimulatedFieldNumber;
#endif  // !_MSC_VER

MatchedTrack::MatchedTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchedTrack::InitAsDefaultInstance() {
}

MatchedTrack::MatchedTrack(const MatchedTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchedTrack::SharedCtor() {
  _cached_size_ = 0;
  eta_ = 0;
  pt_ = 0;
  dxy_reconstructed_ = 0;
  dz_reconstructed_ = 0;
  dxy_simulated_ = 0;
  dz_simulated_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchedTrack::~MatchedTrack() {
  SharedDtor();
}

void MatchedTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchedTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchedTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchedTrack_descriptor_;
}

const MatchedTrack& MatchedTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

MatchedTrack* MatchedTrack::default_instance_ = NULL;

MatchedTrack* MatchedTrack::New() const {
  return new MatchedTrack;
}

void MatchedTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eta_ = 0;
    pt_ = 0;
    dxy_reconstructed_ = 0;
    dz_reconstructed_ = 0;
    dxy_simulated_ = 0;
    dz_simulated_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchedTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pt;
        break;
      }
      
      // optional float pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dxy_reconstructed;
        break;
      }
      
      // optional float dxy_reconstructed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dxy_reconstructed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dxy_reconstructed_)));
          set_has_dxy_reconstructed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dz_reconstructed;
        break;
      }
      
      // optional float dz_reconstructed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dz_reconstructed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dz_reconstructed_)));
          set_has_dz_reconstructed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dxy_simulated;
        break;
      }
      
      // optional float dxy_simulated = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dxy_simulated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dxy_simulated_)));
          set_has_dxy_simulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dz_simulated;
        break;
      }
      
      // optional float dz_simulated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dz_simulated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dz_simulated_)));
          set_has_dz_simulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchedTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float eta = 1;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eta(), output);
  }
  
  // optional float pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pt(), output);
  }
  
  // optional float dxy_reconstructed = 3;
  if (has_dxy_reconstructed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dxy_reconstructed(), output);
  }
  
  // optional float dz_reconstructed = 4;
  if (has_dz_reconstructed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dz_reconstructed(), output);
  }
  
  // optional float dxy_simulated = 5;
  if (has_dxy_simulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dxy_simulated(), output);
  }
  
  // optional float dz_simulated = 6;
  if (has_dz_simulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dz_simulated(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchedTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float eta = 1;
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eta(), target);
  }
  
  // optional float pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pt(), target);
  }
  
  // optional float dxy_reconstructed = 3;
  if (has_dxy_reconstructed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dxy_reconstructed(), target);
  }
  
  // optional float dz_reconstructed = 4;
  if (has_dz_reconstructed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dz_reconstructed(), target);
  }
  
  // optional float dxy_simulated = 5;
  if (has_dxy_simulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dxy_simulated(), target);
  }
  
  // optional float dz_simulated = 6;
  if (has_dz_simulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dz_simulated(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchedTrack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float eta = 1;
    if (has_eta()) {
      total_size += 1 + 4;
    }
    
    // optional float pt = 2;
    if (has_pt()) {
      total_size += 1 + 4;
    }
    
    // optional float dxy_reconstructed = 3;
    if (has_dxy_reconstructed()) {
      total_size += 1 + 4;
    }
    
    // optional float dz_reconstructed = 4;
    if (has_dz_reconstructed()) {
      total_size += 1 + 4;
    }
    
    // optional float dxy_simulated = 5;
    if (has_dxy_simulated()) {
      total_size += 1 + 4;
    }
    
    // optional float dz_simulated = 6;
    if (has_dz_simulated()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchedTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchedTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchedTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchedTrack::MergeFrom(const MatchedTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_pt()) {
      set_pt(from.pt());
    }
    if (from.has_dxy_reconstructed()) {
      set_dxy_reconstructed(from.dxy_reconstructed());
    }
    if (from.has_dz_reconstructed()) {
      set_dz_reconstructed(from.dz_reconstructed());
    }
    if (from.has_dxy_simulated()) {
      set_dxy_simulated(from.dxy_simulated());
    }
    if (from.has_dz_simulated()) {
      set_dz_simulated(from.dz_simulated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchedTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedTrack::CopyFrom(const MatchedTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedTrack::IsInitialized() const {
  
  return true;
}

void MatchedTrack::Swap(MatchedTrack* other) {
  if (other != this) {
    std::swap(eta_, other->eta_);
    std::swap(pt_, other->pt_);
    std::swap(dxy_reconstructed_, other->dxy_reconstructed_);
    std::swap(dz_reconstructed_, other->dz_reconstructed_);
    std::swap(dxy_simulated_, other->dxy_simulated_);
    std::swap(dz_simulated_, other->dz_simulated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchedTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchedTrack_descriptor_;
  metadata.reflection = MatchedTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackingParticleCollection::kTrackingParticleFieldNumber;
#endif  // !_MSC_VER

TrackingParticleCollection::TrackingParticleCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackingParticleCollection::InitAsDefaultInstance() {
}

TrackingParticleCollection::TrackingParticleCollection(const TrackingParticleCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackingParticleCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackingParticleCollection::~TrackingParticleCollection() {
  SharedDtor();
}

void TrackingParticleCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackingParticleCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackingParticleCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackingParticleCollection_descriptor_;
}

const TrackingParticleCollection& TrackingParticleCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

TrackingParticleCollection* TrackingParticleCollection::default_instance_ = NULL;

TrackingParticleCollection* TrackingParticleCollection::New() const {
  return new TrackingParticleCollection;
}

void TrackingParticleCollection::Clear() {
  tracking_particle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackingParticleCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tpanalyserproto.TrackingParticle tracking_particle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracking_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracking_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tracking_particle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackingParticleCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tpanalyserproto.TrackingParticle tracking_particle = 1;
  for (int i = 0; i < this->tracking_particle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tracking_particle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackingParticleCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tpanalyserproto.TrackingParticle tracking_particle = 1;
  for (int i = 0; i < this->tracking_particle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tracking_particle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackingParticleCollection::ByteSize() const {
  int total_size = 0;
  
  // repeated .tpanalyserproto.TrackingParticle tracking_particle = 1;
  total_size += 1 * this->tracking_particle_size();
  for (int i = 0; i < this->tracking_particle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracking_particle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackingParticleCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackingParticleCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackingParticleCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackingParticleCollection::MergeFrom(const TrackingParticleCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracking_particle_.MergeFrom(from.tracking_particle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackingParticleCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingParticleCollection::CopyFrom(const TrackingParticleCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingParticleCollection::IsInitialized() const {
  
  return true;
}

void TrackingParticleCollection::Swap(TrackingParticleCollection* other) {
  if (other != this) {
    tracking_particle_.Swap(&other->tracking_particle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackingParticleCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackingParticleCollection_descriptor_;
  metadata.reflection = TrackingParticleCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchedTrackCollection::kMatchedTrackFieldNumber;
const int MatchedTrackCollection::kNameFieldNumber;
#endif  // !_MSC_VER

MatchedTrackCollection::MatchedTrackCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchedTrackCollection::InitAsDefaultInstance() {
}

MatchedTrackCollection::MatchedTrackCollection(const MatchedTrackCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchedTrackCollection::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchedTrackCollection::~MatchedTrackCollection() {
  SharedDtor();
}

void MatchedTrackCollection::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MatchedTrackCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchedTrackCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchedTrackCollection_descriptor_;
}

const MatchedTrackCollection& MatchedTrackCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

MatchedTrackCollection* MatchedTrackCollection::default_instance_ = NULL;

MatchedTrackCollection* MatchedTrackCollection::New() const {
  return new MatchedTrackCollection;
}

void MatchedTrackCollection::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  matched_track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchedTrackCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tpanalyserproto.MatchedTrack matched_track = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matched_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matched_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_matched_track;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchedTrackCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tpanalyserproto.MatchedTrack matched_track = 1;
  for (int i = 0; i < this->matched_track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matched_track(i), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchedTrackCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tpanalyserproto.MatchedTrack matched_track = 1;
  for (int i = 0; i < this->matched_track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matched_track(i), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchedTrackCollection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .tpanalyserproto.MatchedTrack matched_track = 1;
  total_size += 1 * this->matched_track_size();
  for (int i = 0; i < this->matched_track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matched_track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchedTrackCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchedTrackCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchedTrackCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchedTrackCollection::MergeFrom(const MatchedTrackCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  matched_track_.MergeFrom(from.matched_track_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchedTrackCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedTrackCollection::CopyFrom(const MatchedTrackCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedTrackCollection::IsInitialized() const {
  
  return true;
}

void MatchedTrackCollection::Swap(MatchedTrackCollection* other) {
  if (other != this) {
    matched_track_.Swap(&other->matched_track_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchedTrackCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchedTrackCollection_descriptor_;
  metadata.reflection = MatchedTrackCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kTrackingParticleCollectionFieldNumber;
const int Event::kMatchedTrackCollectionFieldNumber;
const int Event::kBeamSpotFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  beam_spot_ = const_cast< ::tpanalyserproto::TrackingVertex*>(&::tpanalyserproto::TrackingVertex::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  beam_spot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete beam_spot_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_beam_spot()) {
      if (beam_spot_ != NULL) beam_spot_->::tpanalyserproto::TrackingVertex::Clear();
    }
  }
  tracking_particle_collection_.Clear();
  matched_track_collection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tpanalyserproto.TrackingParticleCollection tracking_particle_collection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracking_particle_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracking_particle_collection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tracking_particle_collection;
        if (input->ExpectTag(18)) goto parse_matched_track_collection;
        break;
      }
      
      // repeated .tpanalyserproto.MatchedTrackCollection matched_track_collection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matched_track_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matched_track_collection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matched_track_collection;
        if (input->ExpectTag(26)) goto parse_beam_spot;
        break;
      }
      
      // optional .tpanalyserproto.TrackingVertex beam_spot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_spot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beam_spot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tpanalyserproto.TrackingParticleCollection tracking_particle_collection = 1;
  for (int i = 0; i < this->tracking_particle_collection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tracking_particle_collection(i), output);
  }
  
  // repeated .tpanalyserproto.MatchedTrackCollection matched_track_collection = 2;
  for (int i = 0; i < this->matched_track_collection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matched_track_collection(i), output);
  }
  
  // optional .tpanalyserproto.TrackingVertex beam_spot = 3;
  if (has_beam_spot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beam_spot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tpanalyserproto.TrackingParticleCollection tracking_particle_collection = 1;
  for (int i = 0; i < this->tracking_particle_collection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tracking_particle_collection(i), target);
  }
  
  // repeated .tpanalyserproto.MatchedTrackCollection matched_track_collection = 2;
  for (int i = 0; i < this->matched_track_collection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matched_track_collection(i), target);
  }
  
  // optional .tpanalyserproto.TrackingVertex beam_spot = 3;
  if (has_beam_spot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beam_spot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .tpanalyserproto.TrackingVertex beam_spot = 3;
    if (has_beam_spot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beam_spot());
    }
    
  }
  // repeated .tpanalyserproto.TrackingParticleCollection tracking_particle_collection = 1;
  total_size += 1 * this->tracking_particle_collection_size();
  for (int i = 0; i < this->tracking_particle_collection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracking_particle_collection(i));
  }
  
  // repeated .tpanalyserproto.MatchedTrackCollection matched_track_collection = 2;
  total_size += 1 * this->matched_track_collection_size();
  for (int i = 0; i < this->matched_track_collection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matched_track_collection(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracking_particle_collection_.MergeFrom(from.tracking_particle_collection_);
  matched_track_collection_.MergeFrom(from.matched_track_collection_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_beam_spot()) {
      mutable_beam_spot()->::tpanalyserproto::TrackingVertex::MergeFrom(from.beam_spot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    tracking_particle_collection_.Swap(&other->tracking_particle_collection_);
    matched_track_collection_.Swap(&other->matched_track_collection_);
    std::swap(beam_spot_, other->beam_spot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sample::kEventFieldNumber;
#endif  // !_MSC_VER

Sample::Sample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample::InitAsDefaultInstance() {
}

Sample::Sample(const Sample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample::~Sample() {
  SharedDtor();
}

void Sample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample_descriptor_;
}

const Sample& Sample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackingParticleNtuple_2eproto();  return *default_instance_;
}

Sample* Sample::default_instance_ = NULL;

Sample* Sample::New() const {
  return new Sample;
}

void Sample::Clear() {
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tpanalyserproto.Event event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tpanalyserproto.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tpanalyserproto.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample::ByteSize() const {
  int total_size = 0;
  
  // repeated .tpanalyserproto.Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  
  return true;
}

void Sample::Swap(Sample* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample_descriptor_;
  metadata.reflection = Sample_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpanalyserproto

// @@protoc_insertion_point(global_scope)
