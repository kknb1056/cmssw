// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrackingParticleNtuple.proto

#ifndef PROTOBUF_TrackingParticleNtuple_2eproto__INCLUDED
#define PROTOBUF_TrackingParticleNtuple_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tpanalyserproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();

class SimTrack;
class TrackingParticle;
class TrackingVertex;
class MatchedTrack;
class TrackingParticleCollection;
class MatchedTrackCollection;
class Event;
class Sample;

// ===================================================================

class SimTrack : public ::google::protobuf::Message {
 public:
  SimTrack();
  virtual ~SimTrack();
  
  SimTrack(const SimTrack& from);
  
  inline SimTrack& operator=(const SimTrack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrack& default_instance();
  
  void Swap(SimTrack* other);
  
  // implements Message ----------------------------------------------
  
  SimTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimTrack& from);
  void MergeFrom(const SimTrack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline ::google::protobuf::int64 event() const;
  inline void set_event(::google::protobuf::int64 value);
  
  // optional int64 bunch_crossing = 2;
  inline bool has_bunch_crossing() const;
  inline void clear_bunch_crossing();
  static const int kBunchCrossingFieldNumber = 2;
  inline ::google::protobuf::int64 bunch_crossing() const;
  inline void set_bunch_crossing(::google::protobuf::int64 value);
  
  // optional uint64 track_id = 3;
  inline bool has_track_id() const;
  inline void clear_track_id();
  static const int kTrackIdFieldNumber = 3;
  inline ::google::protobuf::uint64 track_id() const;
  inline void set_track_id(::google::protobuf::uint64 value);
  
  // optional int64 charge = 4;
  inline bool has_charge() const;
  inline void clear_charge();
  static const int kChargeFieldNumber = 4;
  inline ::google::protobuf::int64 charge() const;
  inline void set_charge(::google::protobuf::int64 value);
  
  // optional float mom_x = 5;
  inline bool has_mom_x() const;
  inline void clear_mom_x();
  static const int kMomXFieldNumber = 5;
  inline float mom_x() const;
  inline void set_mom_x(float value);
  
  // optional float mom_y = 6;
  inline bool has_mom_y() const;
  inline void clear_mom_y();
  static const int kMomYFieldNumber = 6;
  inline float mom_y() const;
  inline void set_mom_y(float value);
  
  // optional float mom_z = 7;
  inline bool has_mom_z() const;
  inline void clear_mom_z();
  static const int kMomZFieldNumber = 7;
  inline float mom_z() const;
  inline void set_mom_z(float value);
  
  // optional int64 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int64 type() const;
  inline void set_type(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.SimTrack)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_bunch_crossing();
  inline void clear_has_bunch_crossing();
  inline void set_has_track_id();
  inline void clear_has_track_id();
  inline void set_has_charge();
  inline void clear_has_charge();
  inline void set_has_mom_x();
  inline void clear_has_mom_x();
  inline void set_has_mom_y();
  inline void clear_has_mom_y();
  inline void set_has_mom_z();
  inline void clear_has_mom_z();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 event_;
  ::google::protobuf::int64 bunch_crossing_;
  ::google::protobuf::uint64 track_id_;
  ::google::protobuf::int64 charge_;
  float mom_x_;
  float mom_y_;
  ::google::protobuf::int64 type_;
  float mom_z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static SimTrack* default_instance_;
};
// -------------------------------------------------------------------

class TrackingParticle : public ::google::protobuf::Message {
 public:
  TrackingParticle();
  virtual ~TrackingParticle();
  
  TrackingParticle(const TrackingParticle& from);
  
  inline TrackingParticle& operator=(const TrackingParticle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingParticle& default_instance();
  
  void Swap(TrackingParticle* other);
  
  // implements Message ----------------------------------------------
  
  TrackingParticle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackingParticle& from);
  void MergeFrom(const TrackingParticle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tpanalyserproto.SimTrack sim_track = 1;
  inline int sim_track_size() const;
  inline void clear_sim_track();
  static const int kSimTrackFieldNumber = 1;
  inline const ::tpanalyserproto::SimTrack& sim_track(int index) const;
  inline ::tpanalyserproto::SimTrack* mutable_sim_track(int index);
  inline ::tpanalyserproto::SimTrack* add_sim_track();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::SimTrack >&
      sim_track() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::SimTrack >*
      mutable_sim_track();
  
  // optional .tpanalyserproto.TrackingVertex parent_vertex = 2;
  inline bool has_parent_vertex() const;
  inline void clear_parent_vertex();
  static const int kParentVertexFieldNumber = 2;
  inline const ::tpanalyserproto::TrackingVertex& parent_vertex() const;
  inline ::tpanalyserproto::TrackingVertex* mutable_parent_vertex();
  inline ::tpanalyserproto::TrackingVertex* release_parent_vertex();
  
  // repeated .tpanalyserproto.TrackingVertex decay_vertex = 3;
  inline int decay_vertex_size() const;
  inline void clear_decay_vertex();
  static const int kDecayVertexFieldNumber = 3;
  inline const ::tpanalyserproto::TrackingVertex& decay_vertex(int index) const;
  inline ::tpanalyserproto::TrackingVertex* mutable_decay_vertex(int index);
  inline ::tpanalyserproto::TrackingVertex* add_decay_vertex();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingVertex >&
      decay_vertex() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingVertex >*
      mutable_decay_vertex();
  
  // optional int64 pdg_id = 4;
  inline bool has_pdg_id() const;
  inline void clear_pdg_id();
  static const int kPdgIdFieldNumber = 4;
  inline ::google::protobuf::int64 pdg_id() const;
  inline void set_pdg_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.TrackingParticle)
 private:
  inline void set_has_parent_vertex();
  inline void clear_has_parent_vertex();
  inline void set_has_pdg_id();
  inline void clear_has_pdg_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::SimTrack > sim_track_;
  ::tpanalyserproto::TrackingVertex* parent_vertex_;
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingVertex > decay_vertex_;
  ::google::protobuf::int64 pdg_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static TrackingParticle* default_instance_;
};
// -------------------------------------------------------------------

class TrackingVertex : public ::google::protobuf::Message {
 public:
  TrackingVertex();
  virtual ~TrackingVertex();
  
  TrackingVertex(const TrackingVertex& from);
  
  inline TrackingVertex& operator=(const TrackingVertex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingVertex& default_instance();
  
  void Swap(TrackingVertex* other);
  
  // implements Message ----------------------------------------------
  
  TrackingVertex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackingVertex& from);
  void MergeFrom(const TrackingVertex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float position_x = 1;
  inline bool has_position_x() const;
  inline void clear_position_x();
  static const int kPositionXFieldNumber = 1;
  inline float position_x() const;
  inline void set_position_x(float value);
  
  // optional float position_y = 2;
  inline bool has_position_y() const;
  inline void clear_position_y();
  static const int kPositionYFieldNumber = 2;
  inline float position_y() const;
  inline void set_position_y(float value);
  
  // optional float position_z = 3;
  inline bool has_position_z() const;
  inline void clear_position_z();
  static const int kPositionZFieldNumber = 3;
  inline float position_z() const;
  inline void set_position_z(float value);
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.TrackingVertex)
 private:
  inline void set_has_position_x();
  inline void clear_has_position_x();
  inline void set_has_position_y();
  inline void clear_has_position_y();
  inline void set_has_position_z();
  inline void clear_has_position_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float position_x_;
  float position_y_;
  float position_z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static TrackingVertex* default_instance_;
};
// -------------------------------------------------------------------

class MatchedTrack : public ::google::protobuf::Message {
 public:
  MatchedTrack();
  virtual ~MatchedTrack();
  
  MatchedTrack(const MatchedTrack& from);
  
  inline MatchedTrack& operator=(const MatchedTrack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchedTrack& default_instance();
  
  void Swap(MatchedTrack* other);
  
  // implements Message ----------------------------------------------
  
  MatchedTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchedTrack& from);
  void MergeFrom(const MatchedTrack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float eta = 1;
  inline bool has_eta() const;
  inline void clear_eta();
  static const int kEtaFieldNumber = 1;
  inline float eta() const;
  inline void set_eta(float value);
  
  // optional float pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline float pt() const;
  inline void set_pt(float value);
  
  // optional float dxy_reconstructed = 3;
  inline bool has_dxy_reconstructed() const;
  inline void clear_dxy_reconstructed();
  static const int kDxyReconstructedFieldNumber = 3;
  inline float dxy_reconstructed() const;
  inline void set_dxy_reconstructed(float value);
  
  // optional float dz_reconstructed = 4;
  inline bool has_dz_reconstructed() const;
  inline void clear_dz_reconstructed();
  static const int kDzReconstructedFieldNumber = 4;
  inline float dz_reconstructed() const;
  inline void set_dz_reconstructed(float value);
  
  // optional float dxy_simulated = 5;
  inline bool has_dxy_simulated() const;
  inline void clear_dxy_simulated();
  static const int kDxySimulatedFieldNumber = 5;
  inline float dxy_simulated() const;
  inline void set_dxy_simulated(float value);
  
  // optional float dz_simulated = 6;
  inline bool has_dz_simulated() const;
  inline void clear_dz_simulated();
  static const int kDzSimulatedFieldNumber = 6;
  inline float dz_simulated() const;
  inline void set_dz_simulated(float value);
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.MatchedTrack)
 private:
  inline void set_has_eta();
  inline void clear_has_eta();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_dxy_reconstructed();
  inline void clear_has_dxy_reconstructed();
  inline void set_has_dz_reconstructed();
  inline void clear_has_dz_reconstructed();
  inline void set_has_dxy_simulated();
  inline void clear_has_dxy_simulated();
  inline void set_has_dz_simulated();
  inline void clear_has_dz_simulated();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float eta_;
  float pt_;
  float dxy_reconstructed_;
  float dz_reconstructed_;
  float dxy_simulated_;
  float dz_simulated_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static MatchedTrack* default_instance_;
};
// -------------------------------------------------------------------

class TrackingParticleCollection : public ::google::protobuf::Message {
 public:
  TrackingParticleCollection();
  virtual ~TrackingParticleCollection();
  
  TrackingParticleCollection(const TrackingParticleCollection& from);
  
  inline TrackingParticleCollection& operator=(const TrackingParticleCollection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingParticleCollection& default_instance();
  
  void Swap(TrackingParticleCollection* other);
  
  // implements Message ----------------------------------------------
  
  TrackingParticleCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackingParticleCollection& from);
  void MergeFrom(const TrackingParticleCollection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tpanalyserproto.TrackingParticle tracking_particle = 1;
  inline int tracking_particle_size() const;
  inline void clear_tracking_particle();
  static const int kTrackingParticleFieldNumber = 1;
  inline const ::tpanalyserproto::TrackingParticle& tracking_particle(int index) const;
  inline ::tpanalyserproto::TrackingParticle* mutable_tracking_particle(int index);
  inline ::tpanalyserproto::TrackingParticle* add_tracking_particle();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticle >&
      tracking_particle() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticle >*
      mutable_tracking_particle();
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.TrackingParticleCollection)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticle > tracking_particle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static TrackingParticleCollection* default_instance_;
};
// -------------------------------------------------------------------

class MatchedTrackCollection : public ::google::protobuf::Message {
 public:
  MatchedTrackCollection();
  virtual ~MatchedTrackCollection();
  
  MatchedTrackCollection(const MatchedTrackCollection& from);
  
  inline MatchedTrackCollection& operator=(const MatchedTrackCollection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchedTrackCollection& default_instance();
  
  void Swap(MatchedTrackCollection* other);
  
  // implements Message ----------------------------------------------
  
  MatchedTrackCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchedTrackCollection& from);
  void MergeFrom(const MatchedTrackCollection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tpanalyserproto.MatchedTrack matched_track = 1;
  inline int matched_track_size() const;
  inline void clear_matched_track();
  static const int kMatchedTrackFieldNumber = 1;
  inline const ::tpanalyserproto::MatchedTrack& matched_track(int index) const;
  inline ::tpanalyserproto::MatchedTrack* mutable_matched_track(int index);
  inline ::tpanalyserproto::MatchedTrack* add_matched_track();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrack >&
      matched_track() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrack >*
      mutable_matched_track();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.MatchedTrackCollection)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrack > matched_track_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static MatchedTrackCollection* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();
  
  Event(const Event& from);
  
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();
  
  void Swap(Event* other);
  
  // implements Message ----------------------------------------------
  
  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tpanalyserproto.TrackingParticleCollection tracking_particle_collection = 1;
  inline int tracking_particle_collection_size() const;
  inline void clear_tracking_particle_collection();
  static const int kTrackingParticleCollectionFieldNumber = 1;
  inline const ::tpanalyserproto::TrackingParticleCollection& tracking_particle_collection(int index) const;
  inline ::tpanalyserproto::TrackingParticleCollection* mutable_tracking_particle_collection(int index);
  inline ::tpanalyserproto::TrackingParticleCollection* add_tracking_particle_collection();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticleCollection >&
      tracking_particle_collection() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticleCollection >*
      mutable_tracking_particle_collection();
  
  // repeated .tpanalyserproto.MatchedTrackCollection matched_track_collection = 2;
  inline int matched_track_collection_size() const;
  inline void clear_matched_track_collection();
  static const int kMatchedTrackCollectionFieldNumber = 2;
  inline const ::tpanalyserproto::MatchedTrackCollection& matched_track_collection(int index) const;
  inline ::tpanalyserproto::MatchedTrackCollection* mutable_matched_track_collection(int index);
  inline ::tpanalyserproto::MatchedTrackCollection* add_matched_track_collection();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrackCollection >&
      matched_track_collection() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrackCollection >*
      mutable_matched_track_collection();
  
  // optional .tpanalyserproto.TrackingVertex beam_spot = 3;
  inline bool has_beam_spot() const;
  inline void clear_beam_spot();
  static const int kBeamSpotFieldNumber = 3;
  inline const ::tpanalyserproto::TrackingVertex& beam_spot() const;
  inline ::tpanalyserproto::TrackingVertex* mutable_beam_spot();
  inline ::tpanalyserproto::TrackingVertex* release_beam_spot();
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.Event)
 private:
  inline void set_has_beam_spot();
  inline void clear_has_beam_spot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticleCollection > tracking_particle_collection_;
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrackCollection > matched_track_collection_;
  ::tpanalyserproto::TrackingVertex* beam_spot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class Sample : public ::google::protobuf::Message {
 public:
  Sample();
  virtual ~Sample();
  
  Sample(const Sample& from);
  
  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sample& default_instance();
  
  void Swap(Sample* other);
  
  // implements Message ----------------------------------------------
  
  Sample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tpanalyserproto.Event event = 1;
  inline int event_size() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::tpanalyserproto::Event& event(int index) const;
  inline ::tpanalyserproto::Event* mutable_event(int index);
  inline ::tpanalyserproto::Event* add_event();
  inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::Event >&
      event() const;
  inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::Event >*
      mutable_event();
  
  // @@protoc_insertion_point(class_scope:tpanalyserproto.Sample)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::Event > event_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_AssignDesc_TrackingParticleNtuple_2eproto();
  friend void protobuf_ShutdownFile_TrackingParticleNtuple_2eproto();
  
  void InitAsDefaultInstance();
  static Sample* default_instance_;
};
// ===================================================================


// ===================================================================

// SimTrack

// optional int64 event = 1;
inline bool SimTrack::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimTrack::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimTrack::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimTrack::clear_event() {
  event_ = GOOGLE_LONGLONG(0);
  clear_has_event();
}
inline ::google::protobuf::int64 SimTrack::event() const {
  return event_;
}
inline void SimTrack::set_event(::google::protobuf::int64 value) {
  set_has_event();
  event_ = value;
}

// optional int64 bunch_crossing = 2;
inline bool SimTrack::has_bunch_crossing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimTrack::set_has_bunch_crossing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimTrack::clear_has_bunch_crossing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimTrack::clear_bunch_crossing() {
  bunch_crossing_ = GOOGLE_LONGLONG(0);
  clear_has_bunch_crossing();
}
inline ::google::protobuf::int64 SimTrack::bunch_crossing() const {
  return bunch_crossing_;
}
inline void SimTrack::set_bunch_crossing(::google::protobuf::int64 value) {
  set_has_bunch_crossing();
  bunch_crossing_ = value;
}

// optional uint64 track_id = 3;
inline bool SimTrack::has_track_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimTrack::set_has_track_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimTrack::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimTrack::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
  clear_has_track_id();
}
inline ::google::protobuf::uint64 SimTrack::track_id() const {
  return track_id_;
}
inline void SimTrack::set_track_id(::google::protobuf::uint64 value) {
  set_has_track_id();
  track_id_ = value;
}

// optional int64 charge = 4;
inline bool SimTrack::has_charge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimTrack::set_has_charge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimTrack::clear_has_charge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimTrack::clear_charge() {
  charge_ = GOOGLE_LONGLONG(0);
  clear_has_charge();
}
inline ::google::protobuf::int64 SimTrack::charge() const {
  return charge_;
}
inline void SimTrack::set_charge(::google::protobuf::int64 value) {
  set_has_charge();
  charge_ = value;
}

// optional float mom_x = 5;
inline bool SimTrack::has_mom_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimTrack::set_has_mom_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimTrack::clear_has_mom_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimTrack::clear_mom_x() {
  mom_x_ = 0;
  clear_has_mom_x();
}
inline float SimTrack::mom_x() const {
  return mom_x_;
}
inline void SimTrack::set_mom_x(float value) {
  set_has_mom_x();
  mom_x_ = value;
}

// optional float mom_y = 6;
inline bool SimTrack::has_mom_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimTrack::set_has_mom_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimTrack::clear_has_mom_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimTrack::clear_mom_y() {
  mom_y_ = 0;
  clear_has_mom_y();
}
inline float SimTrack::mom_y() const {
  return mom_y_;
}
inline void SimTrack::set_mom_y(float value) {
  set_has_mom_y();
  mom_y_ = value;
}

// optional float mom_z = 7;
inline bool SimTrack::has_mom_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimTrack::set_has_mom_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimTrack::clear_has_mom_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimTrack::clear_mom_z() {
  mom_z_ = 0;
  clear_has_mom_z();
}
inline float SimTrack::mom_z() const {
  return mom_z_;
}
inline void SimTrack::set_mom_z(float value) {
  set_has_mom_z();
  mom_z_ = value;
}

// optional int64 type = 8;
inline bool SimTrack::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimTrack::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SimTrack::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SimTrack::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
  clear_has_type();
}
inline ::google::protobuf::int64 SimTrack::type() const {
  return type_;
}
inline void SimTrack::set_type(::google::protobuf::int64 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TrackingParticle

// repeated .tpanalyserproto.SimTrack sim_track = 1;
inline int TrackingParticle::sim_track_size() const {
  return sim_track_.size();
}
inline void TrackingParticle::clear_sim_track() {
  sim_track_.Clear();
}
inline const ::tpanalyserproto::SimTrack& TrackingParticle::sim_track(int index) const {
  return sim_track_.Get(index);
}
inline ::tpanalyserproto::SimTrack* TrackingParticle::mutable_sim_track(int index) {
  return sim_track_.Mutable(index);
}
inline ::tpanalyserproto::SimTrack* TrackingParticle::add_sim_track() {
  return sim_track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::SimTrack >&
TrackingParticle::sim_track() const {
  return sim_track_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::SimTrack >*
TrackingParticle::mutable_sim_track() {
  return &sim_track_;
}

// optional .tpanalyserproto.TrackingVertex parent_vertex = 2;
inline bool TrackingParticle::has_parent_vertex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackingParticle::set_has_parent_vertex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackingParticle::clear_has_parent_vertex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackingParticle::clear_parent_vertex() {
  if (parent_vertex_ != NULL) parent_vertex_->::tpanalyserproto::TrackingVertex::Clear();
  clear_has_parent_vertex();
}
inline const ::tpanalyserproto::TrackingVertex& TrackingParticle::parent_vertex() const {
  return parent_vertex_ != NULL ? *parent_vertex_ : *default_instance_->parent_vertex_;
}
inline ::tpanalyserproto::TrackingVertex* TrackingParticle::mutable_parent_vertex() {
  set_has_parent_vertex();
  if (parent_vertex_ == NULL) parent_vertex_ = new ::tpanalyserproto::TrackingVertex;
  return parent_vertex_;
}
inline ::tpanalyserproto::TrackingVertex* TrackingParticle::release_parent_vertex() {
  clear_has_parent_vertex();
  ::tpanalyserproto::TrackingVertex* temp = parent_vertex_;
  parent_vertex_ = NULL;
  return temp;
}

// repeated .tpanalyserproto.TrackingVertex decay_vertex = 3;
inline int TrackingParticle::decay_vertex_size() const {
  return decay_vertex_.size();
}
inline void TrackingParticle::clear_decay_vertex() {
  decay_vertex_.Clear();
}
inline const ::tpanalyserproto::TrackingVertex& TrackingParticle::decay_vertex(int index) const {
  return decay_vertex_.Get(index);
}
inline ::tpanalyserproto::TrackingVertex* TrackingParticle::mutable_decay_vertex(int index) {
  return decay_vertex_.Mutable(index);
}
inline ::tpanalyserproto::TrackingVertex* TrackingParticle::add_decay_vertex() {
  return decay_vertex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingVertex >&
TrackingParticle::decay_vertex() const {
  return decay_vertex_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingVertex >*
TrackingParticle::mutable_decay_vertex() {
  return &decay_vertex_;
}

// optional int64 pdg_id = 4;
inline bool TrackingParticle::has_pdg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackingParticle::set_has_pdg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackingParticle::clear_has_pdg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackingParticle::clear_pdg_id() {
  pdg_id_ = GOOGLE_LONGLONG(0);
  clear_has_pdg_id();
}
inline ::google::protobuf::int64 TrackingParticle::pdg_id() const {
  return pdg_id_;
}
inline void TrackingParticle::set_pdg_id(::google::protobuf::int64 value) {
  set_has_pdg_id();
  pdg_id_ = value;
}

// -------------------------------------------------------------------

// TrackingVertex

// optional float position_x = 1;
inline bool TrackingVertex::has_position_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackingVertex::set_has_position_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackingVertex::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackingVertex::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
inline float TrackingVertex::position_x() const {
  return position_x_;
}
inline void TrackingVertex::set_position_x(float value) {
  set_has_position_x();
  position_x_ = value;
}

// optional float position_y = 2;
inline bool TrackingVertex::has_position_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackingVertex::set_has_position_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackingVertex::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackingVertex::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
inline float TrackingVertex::position_y() const {
  return position_y_;
}
inline void TrackingVertex::set_position_y(float value) {
  set_has_position_y();
  position_y_ = value;
}

// optional float position_z = 3;
inline bool TrackingVertex::has_position_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackingVertex::set_has_position_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackingVertex::clear_has_position_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackingVertex::clear_position_z() {
  position_z_ = 0;
  clear_has_position_z();
}
inline float TrackingVertex::position_z() const {
  return position_z_;
}
inline void TrackingVertex::set_position_z(float value) {
  set_has_position_z();
  position_z_ = value;
}

// -------------------------------------------------------------------

// MatchedTrack

// optional float eta = 1;
inline bool MatchedTrack::has_eta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchedTrack::set_has_eta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchedTrack::clear_has_eta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchedTrack::clear_eta() {
  eta_ = 0;
  clear_has_eta();
}
inline float MatchedTrack::eta() const {
  return eta_;
}
inline void MatchedTrack::set_eta(float value) {
  set_has_eta();
  eta_ = value;
}

// optional float pt = 2;
inline bool MatchedTrack::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchedTrack::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchedTrack::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchedTrack::clear_pt() {
  pt_ = 0;
  clear_has_pt();
}
inline float MatchedTrack::pt() const {
  return pt_;
}
inline void MatchedTrack::set_pt(float value) {
  set_has_pt();
  pt_ = value;
}

// optional float dxy_reconstructed = 3;
inline bool MatchedTrack::has_dxy_reconstructed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchedTrack::set_has_dxy_reconstructed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchedTrack::clear_has_dxy_reconstructed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchedTrack::clear_dxy_reconstructed() {
  dxy_reconstructed_ = 0;
  clear_has_dxy_reconstructed();
}
inline float MatchedTrack::dxy_reconstructed() const {
  return dxy_reconstructed_;
}
inline void MatchedTrack::set_dxy_reconstructed(float value) {
  set_has_dxy_reconstructed();
  dxy_reconstructed_ = value;
}

// optional float dz_reconstructed = 4;
inline bool MatchedTrack::has_dz_reconstructed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchedTrack::set_has_dz_reconstructed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchedTrack::clear_has_dz_reconstructed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchedTrack::clear_dz_reconstructed() {
  dz_reconstructed_ = 0;
  clear_has_dz_reconstructed();
}
inline float MatchedTrack::dz_reconstructed() const {
  return dz_reconstructed_;
}
inline void MatchedTrack::set_dz_reconstructed(float value) {
  set_has_dz_reconstructed();
  dz_reconstructed_ = value;
}

// optional float dxy_simulated = 5;
inline bool MatchedTrack::has_dxy_simulated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchedTrack::set_has_dxy_simulated() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchedTrack::clear_has_dxy_simulated() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchedTrack::clear_dxy_simulated() {
  dxy_simulated_ = 0;
  clear_has_dxy_simulated();
}
inline float MatchedTrack::dxy_simulated() const {
  return dxy_simulated_;
}
inline void MatchedTrack::set_dxy_simulated(float value) {
  set_has_dxy_simulated();
  dxy_simulated_ = value;
}

// optional float dz_simulated = 6;
inline bool MatchedTrack::has_dz_simulated() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchedTrack::set_has_dz_simulated() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchedTrack::clear_has_dz_simulated() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchedTrack::clear_dz_simulated() {
  dz_simulated_ = 0;
  clear_has_dz_simulated();
}
inline float MatchedTrack::dz_simulated() const {
  return dz_simulated_;
}
inline void MatchedTrack::set_dz_simulated(float value) {
  set_has_dz_simulated();
  dz_simulated_ = value;
}

// -------------------------------------------------------------------

// TrackingParticleCollection

// repeated .tpanalyserproto.TrackingParticle tracking_particle = 1;
inline int TrackingParticleCollection::tracking_particle_size() const {
  return tracking_particle_.size();
}
inline void TrackingParticleCollection::clear_tracking_particle() {
  tracking_particle_.Clear();
}
inline const ::tpanalyserproto::TrackingParticle& TrackingParticleCollection::tracking_particle(int index) const {
  return tracking_particle_.Get(index);
}
inline ::tpanalyserproto::TrackingParticle* TrackingParticleCollection::mutable_tracking_particle(int index) {
  return tracking_particle_.Mutable(index);
}
inline ::tpanalyserproto::TrackingParticle* TrackingParticleCollection::add_tracking_particle() {
  return tracking_particle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticle >&
TrackingParticleCollection::tracking_particle() const {
  return tracking_particle_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticle >*
TrackingParticleCollection::mutable_tracking_particle() {
  return &tracking_particle_;
}

// -------------------------------------------------------------------

// MatchedTrackCollection

// repeated .tpanalyserproto.MatchedTrack matched_track = 1;
inline int MatchedTrackCollection::matched_track_size() const {
  return matched_track_.size();
}
inline void MatchedTrackCollection::clear_matched_track() {
  matched_track_.Clear();
}
inline const ::tpanalyserproto::MatchedTrack& MatchedTrackCollection::matched_track(int index) const {
  return matched_track_.Get(index);
}
inline ::tpanalyserproto::MatchedTrack* MatchedTrackCollection::mutable_matched_track(int index) {
  return matched_track_.Mutable(index);
}
inline ::tpanalyserproto::MatchedTrack* MatchedTrackCollection::add_matched_track() {
  return matched_track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrack >&
MatchedTrackCollection::matched_track() const {
  return matched_track_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrack >*
MatchedTrackCollection::mutable_matched_track() {
  return &matched_track_;
}

// optional string name = 2;
inline bool MatchedTrackCollection::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchedTrackCollection::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchedTrackCollection::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchedTrackCollection::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MatchedTrackCollection::name() const {
  return *name_;
}
inline void MatchedTrackCollection::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MatchedTrackCollection::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MatchedTrackCollection::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchedTrackCollection::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MatchedTrackCollection::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Event

// repeated .tpanalyserproto.TrackingParticleCollection tracking_particle_collection = 1;
inline int Event::tracking_particle_collection_size() const {
  return tracking_particle_collection_.size();
}
inline void Event::clear_tracking_particle_collection() {
  tracking_particle_collection_.Clear();
}
inline const ::tpanalyserproto::TrackingParticleCollection& Event::tracking_particle_collection(int index) const {
  return tracking_particle_collection_.Get(index);
}
inline ::tpanalyserproto::TrackingParticleCollection* Event::mutable_tracking_particle_collection(int index) {
  return tracking_particle_collection_.Mutable(index);
}
inline ::tpanalyserproto::TrackingParticleCollection* Event::add_tracking_particle_collection() {
  return tracking_particle_collection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticleCollection >&
Event::tracking_particle_collection() const {
  return tracking_particle_collection_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::TrackingParticleCollection >*
Event::mutable_tracking_particle_collection() {
  return &tracking_particle_collection_;
}

// repeated .tpanalyserproto.MatchedTrackCollection matched_track_collection = 2;
inline int Event::matched_track_collection_size() const {
  return matched_track_collection_.size();
}
inline void Event::clear_matched_track_collection() {
  matched_track_collection_.Clear();
}
inline const ::tpanalyserproto::MatchedTrackCollection& Event::matched_track_collection(int index) const {
  return matched_track_collection_.Get(index);
}
inline ::tpanalyserproto::MatchedTrackCollection* Event::mutable_matched_track_collection(int index) {
  return matched_track_collection_.Mutable(index);
}
inline ::tpanalyserproto::MatchedTrackCollection* Event::add_matched_track_collection() {
  return matched_track_collection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrackCollection >&
Event::matched_track_collection() const {
  return matched_track_collection_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::MatchedTrackCollection >*
Event::mutable_matched_track_collection() {
  return &matched_track_collection_;
}

// optional .tpanalyserproto.TrackingVertex beam_spot = 3;
inline bool Event::has_beam_spot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_beam_spot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_beam_spot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_beam_spot() {
  if (beam_spot_ != NULL) beam_spot_->::tpanalyserproto::TrackingVertex::Clear();
  clear_has_beam_spot();
}
inline const ::tpanalyserproto::TrackingVertex& Event::beam_spot() const {
  return beam_spot_ != NULL ? *beam_spot_ : *default_instance_->beam_spot_;
}
inline ::tpanalyserproto::TrackingVertex* Event::mutable_beam_spot() {
  set_has_beam_spot();
  if (beam_spot_ == NULL) beam_spot_ = new ::tpanalyserproto::TrackingVertex;
  return beam_spot_;
}
inline ::tpanalyserproto::TrackingVertex* Event::release_beam_spot() {
  clear_has_beam_spot();
  ::tpanalyserproto::TrackingVertex* temp = beam_spot_;
  beam_spot_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Sample

// repeated .tpanalyserproto.Event event = 1;
inline int Sample::event_size() const {
  return event_.size();
}
inline void Sample::clear_event() {
  event_.Clear();
}
inline const ::tpanalyserproto::Event& Sample::event(int index) const {
  return event_.Get(index);
}
inline ::tpanalyserproto::Event* Sample::mutable_event(int index) {
  return event_.Mutable(index);
}
inline ::tpanalyserproto::Event* Sample::add_event() {
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::Event >&
Sample::event() const {
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::tpanalyserproto::Event >*
Sample::mutable_event() {
  return &event_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpanalyserproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrackingParticleNtuple_2eproto__INCLUDED
